name: 'Terraform Apply - Azure'
description: 'Downloads artifact created by `haflidif/terraform-azure-plan` and runs Terraform apply on Azure by using Azure backend.'

inputs:
  plan_mode:
    description: '(Optional) The mode to run the plan in. Valid options are `deploy` or `destroy`. Defaults to `deploy`.'
    type: string
    required: false
    default: 'deploy'
  
  # Terraform Inputs

  tf_version:
    description: '(Optional) The version of Terraform to use. Defaults to the latest version.'
    type: string
    required: false
    default: 'latest'
    
  tf_var_file:
    description: '(Optional) The variable file to use. Defaults to `terraform.tfvars`.'
    type: string
    required: false
    default: 'terraform.tfvars'
   
  tf_state_file:
    description: '(Optional) The state file to use. Defaults to `terraform.tfstate`.'
    type: string
    required: false
    default: 'terraform.tfstate'
  
  # Azure Remote Backend Resource Inputs
  az_resource_group:
    description: '(Required) The name of the Azure Resource Group to use for the remote backend.'
    type: string
    required: true

  az_storage_account_name:
    description: '(Required) The name of the Azure Storage Account to use for the remote backend.'
    type: string
    required: true
  
  az_storage_container_name:
    description: '(Required) The name of the Azure Storage Container to use for the remote backend.'
    type: string
    required: true
  
  az_storage_key:
    description: '(Required) The key to use for the remote backend.'
    type: string
    required: true
  
  # Azure ARM Inputs

  arm_client_id:
    description: '(Required) The client ID of the `Azure Service Principal` or `User Assigned Managed Identity` to use for authentication.'
    type: string
    required: true
  
  arm_use_oidc:
    description: '(Optional) Whether to use OIDC for authentication. Defaults to `false`.'
    required: false
    type: boolean
    default: false
  
  arm_use_azuread:
    description: | 
      (Optional) Whether to use Azure AD for authentication towards Azure Remote Backend Storage Account and Containers.
      Requires RBAC permissions `Storage Blob Data Owner` or `Storage Blob Data Contributor` on the Storage Account/Container for the identity being used.
      Defaults to `false`.
    required: false
    type: boolean
    default: false
  
  arm_client_secret:
    description: '(Conditionally required) The client secret of the Azure Service Principal to use for authentication. Required if `arm_client_id` is a Service Principal with Client Secret'
    required: false
    type: string
    default: ''
  
  arm_tenant_id:
    description: '(Required) The tenant ID of the Azure Service Principal to use for authentication.'
    type: string
    required: true
  
  arm_subscription_id:
    description: '(Required) The subscription ID of the Azure Service Principal to use for authentication.'
    type: string
    required: true

branding:
  icon: 'align-left'
  color: 'blue'

runs:
  using: composite

  steps:
    - name: Setting Environment Variables
      shell: bash
      id: env_vars
      run: |
        echo "ARM_CLIENT_ID=${{ inputs.arm_client_id }}" >> $GITHUB_ENV
        if [ "${{ inputs.arm_use_oidc }}" = "false"]; then
          echo "ARM_CLIENT_SECRET=${{ inputs.arm_client_secret }}" >> $GITHUB_ENV
        else
          echo "ARM_USE_OIDC=${{ inputs.arm_use_oidc }}" >> $GITHUB_ENV
        fi
        echo "ARM_USE_AZUREAD=${{ inputs.use_azuread }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ inputs.arm_tenant_id }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ inputs.arm_subscription_id }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{inputs.github_token}}"
      working-directory: ${{ inputs.path }}

    - name: Downloading Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: "${{ inputs.plan_mode }}-${{ inputs.tf_state_file }}"
        path: ${{ inputs.plan_mode }}/staging
    
    - name: Decompressing Artifact
      shell: bash
      run: |
        unzip ${{ inputs.plan_mode }}${{ inputs.tf_state_file }}.zip
      working-directory: ${{ inputs.plan_mode }}/staging

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.1
      with:
        terraform_version: ${{ inputs.tf_version }}
        terraform_wrapper: true
    
    - name: Terraform Init
      shell: bash
      id: init
      run: | 
        terraform init
        --backend-config="resource_group_name=${{ inputs.az_resource_group }}"
        --backend-config="storage_account_name=${{ inputs.az_storage_acc }}"
        --backend-config="container_name=${{ inputs.az_container_name }}"
        --backend-config="resource_group_name=${{ inputs.az_resource_group }}"
        --backend-config="key=${{ inputs.az_strorage_key }}"
      working-directory: ${{ inputs.plan_mode }}/staging
    
    - name: Terraform Apply (Deploy)
      if: ${{ inputs.plan_mode == 'deploy'' }}
      shell: bash
      run: |
        terraform apply deploy_plan.tfplan
      working-directory: ${{ inputs.plan_mode }}/staging
    
    - name: Terraform Apply (Destroy)
      if: ${{ inputs.plan_mode == 'destroy'' }}
      shell: bash
      run: |
        terraform apply destroy_plan.tfplan
      working-directory: ${{ inputs.plan_mode }}/staging
